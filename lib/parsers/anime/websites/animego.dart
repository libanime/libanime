///
/// Auto generated code by selector_schema_codegen
///
/// id: animego
/// name: animego
/// author: vypivshiy
/// description:
///     animego schema extractors
/// headers required:
///   "x-requested-with": "XMLHttpRequest
///   "User-Agent": ...
///
/// source: https://animego.org
/// tags:
///     anime, parser
///
/// WARNING: Any manual changes made to this file will be lost when this
/// is run again. Do not edit this file unless you know what you are doing.
///
///

/// P. S. (by lib maintainer nekokitsu) This file was generated by a generator written by vypivshiy,
/// and added here for future reworking into a practical standardized parser, although it will not be used in Shiroku.

/*import 'dart:core';
import 'package:universal_html/html.dart' show Document;
import 'package:universal_html/parsing.dart' as html;

// TODO change dynamic to generic with String OR List<String>
typedef ParsedValue = Map<String, dynamic>;

class __BaseViewModel {
  final String document;
  late final Document selector;
  final Map<String, String> _aliases = {};
  final List<String> _viewKeys = [];
  final List<ParsedValue> _cachedResult = [];

  __BaseViewModel(this.document) {
    selector = html.parseHtmlDocument(document);
  }

  parse() {
    _preValidate(selector);
    _startParse();
    return this;
  }

  _preValidate(Document part) {}

  _startParse() {}

  // TODO typing better
  List<dynamic> _partDocument(dynamic part) {
    return [];
  }

  List<ParsedValue> view() {
    ParsedValue mapFields(ParsedValue result) {
      ParsedValue viewDict = {};
      for (String k in _viewKeys) {
        var v = result[k];
        if (v != null) {
          k = _aliases[k] ?? k;
          viewDict[k] = v;
        }
      }
      return viewDict;
    }

    if (_cachedResult.length == 1) {
      return [mapFields(_cachedResult[0])];
    }
    return _cachedResult.map(mapFields).toList();
  }
}

class Ongoing extends __BaseViewModel {
  /// Get all available ongoings from main page
  /// Prepare:
  ///   1. GET https://animego.org
  ///
  /// view() elements signature:
  /// url <TEXT> - ongoing page
  /// title <TEXT> - ongoing name
  /// thumbnail <TEXT> - ongoing thumbnail image
  /// episode <TEXT> - episode num
  /// dub <TEXT> - dubber name
  ///
  @override
  Map<String, String> get _aliases => {};
  @override
  List<String> get _viewKeys => ['url', 'title', 'thumbnail', 'episode', 'dub'];
  Ongoing(super.document);

  @override
  _preValidate(Document part) {
    var val_0 = part.querySelector("title");
    String val_1 = val_0?.text ?? "";
    RegExp re_2 = RegExp(r"Смотреть Аниме онлайн");
    assert(re_2.firstMatch(val_1) != null);
  }

  @override
  List<dynamic> _partDocument(dynamic part) {
    _preValidate(selector);
    var val_0 = part.querySelectorAll(".border-bottom-0.cursor-pointer");
    return val_0;
  }

  String _parseUrl(dynamic part) {
    String val_0 = part.attributes["onclick"];
    String val_1 = val_0.replaceFirst(RegExp(r'^location\.href='), "");
    String val_2 = val_1.replaceFirst(RegExp(r"^'"), "");
    val_2 = val_2.replaceFirst(RegExp(r"'$"), "");
    String val_3 = "https://animego.org$val_2";
    return val_3;
  }

  String _parseTitle(dynamic part) {
    var val_0 = part.querySelector(".last-update-title");
    String val_1 = val_0?.text ?? "";
    return val_1;
  }

  String _parseThumbnail(dynamic part) {
    var val_0 = part.querySelector(".lazy");
    String val_1 = val_0.attributes["style"];
    String val_2 = val_1.replaceFirst(RegExp(r'^background-image: url\('), "");
    String val_3 = val_2.replaceFirst(RegExp(r'\);$'), "");
    return val_3;
  }

  String _parseEpisode(dynamic part) {
    var val_0 = part.querySelector(".text-truncate");
    String val_1 = val_0?.text ?? "";
    RegExp regex_2 = RegExp(r"(\d+)\s");
    String val_2 = regex_2.firstMatch(val_1)?.group(0) ?? '';
    return val_2;
  }

  String _parseDub(dynamic part) {
    var val_0 = part.querySelector(".text-gray-dark-6");
    String val_1 = val_0?.text ?? "";
    return val_1;
  }

  @override
  _startParse() {
    // clear cache
    _cachedResult.clear();
    for (var part in _partDocument(selector)) {
      _cachedResult.add({
        'url': _parseUrl(part),
        'title': _parseTitle(part),
        'thumbnail': _parseThumbnail(part),
        'episode': _parseEpisode(part),
        'dub': _parseDub(part),
      });
    }
  }
}

class Search extends __BaseViewModel {
  /// Get all search results by query
  /// Prepare:
  ///   1. GET to https://animego.org/search/anime?q={QUERY}
  ///
  /// view() elements signature:
  /// title <TEXT> - title name
  /// thumbnail <TEXT> - thumbnail image
  /// url <TEXT> - anime page link
  ///
  @override
  Map<String, String> get _aliases => {};
  @override
  List<String> get _viewKeys => ['title', 'thumbnail', 'url'];
  Search(super.document);

  @override
  _preValidate(Document part) {
    null;
  }

  @override
  List<dynamic> _partDocument(dynamic part) {
    _preValidate(selector);
    var val_0 = part.querySelectorAll(".row > .col-ul-2");
    return val_0;
  }

  String _parseTitle(dynamic part) {
    var val_0 = part.querySelector(".text-truncate a");
    String val_1 = val_0.attributes["title"];
    return val_1;
  }

  String _parseThumbnail(dynamic part) {
    var val_0 = part.querySelector(".lazy");
    String val_1 = val_0.attributes["data-original"];
    return val_1;
  }

  String _parseUrl(dynamic part) {
    var val_0 = part.querySelector(".text-truncate a");
    String val_1 = val_0.attributes["href"];
    return val_1;
  }

  @override
  _startParse() {
    // clear cache
    _cachedResult.clear();
    for (var part in _partDocument(selector)) {
      _cachedResult.add({
        'title': _parseTitle(part),
        'thumbnail': _parseThumbnail(part),
        'url': _parseUrl(part),
      });
    }
  }
}

class Anime extends __BaseViewModel {
  /// Anime page information
  /// Prepare:
  ///   1. GET to anime page EG: https://animego.org/anime/eksperimenty-leyn-1114
  ///
  /// view() elements signature:
  /// title <TEXT> - anime title
  /// description <TEXT> - anime description
  /// thumbnail <TEXT> -
  /// id <TEXT> - anime id required for next requests (for DubberView, Source schemas)
  /// raw_json <TEXT> - for parse extra metadata
  ///
  @override
  Map<String, String> get _aliases => {};
  @override
  List<String> get _viewKeys =>
      ['title', 'description', 'thumbnail', 'id', 'raw_json'];
  Anime(super.document);

  @override
  _preValidate(Document part) {
    var val_0 = part.querySelector("title");
    String val_1 = val_0?.text ?? "";
    RegExp re_2 = RegExp(r".* смотреть онлайн .*");
    assert(re_2.firstMatch(val_1) != null);
  }

  @override
  List<dynamic> _partDocument(dynamic part) {
    _preValidate(selector);
    return [part];
  }

  String _parseTitle(dynamic part) {
    var val_0 = part.querySelector(".anime-title h1");
    String val_1 = val_0?.text ?? "";
    return val_1;
  }

  String _parseDescription(dynamic part) {
    var val_0 = part.querySelectorAll(".description");
    var val_1 = val_0.map((el) => el.text).toList();
    String val_2 = val_1.join(" ");
    return val_2;
  }

  String _parseThumbnail(dynamic part) {
    var val_0 = part.querySelector("#content img");
    String val_1 = val_0.attributes["src"];
    return val_1;
  }

  String _parseId(dynamic part) {
    var val_0 = part.querySelector(".br-2 .my-list-anime");
    String val_1 = val_0.attributes["id"];
    String val_2 = val_1.replaceFirst(RegExp(r'^my-list-'), "");
    return val_2;
  }

  String _parseRawJson(dynamic part) {
    var val_0 = part.querySelector("script[type='application/ld+json']");
    String val_1 = val_0?.text ?? "";
    return val_1;
  }

  @override
  _startParse() {
    // clear cache
    _cachedResult.clear();
    for (var part in _partDocument(selector)) {
      _cachedResult.add({
        'title': _parseTitle(part),
        'description': _parseDescription(part),
        'thumbnail': _parseThumbnail(part),
        'id': _parseId(part),
        'raw_json': _parseRawJson(part),
      });
    }
  }
}

class DubbersView extends __BaseViewModel {
  /// Representation dubbers in {id: 'dubber_id', name: 'dubber_name'}
  ///
  /// Prepare:
  ///   1. get id from Anime object
  ///   2. GET 'https://animego.org/anime/{Anime.id}/player?_allow=true'
  ///   3. extract html from json by ['content'] key
  ///   4. OPTIONAL: unescape HTML
  ///
  /// view() elements signature:
  /// id <TEXT> - dubber_id
  /// name <TEXT> - dubber name
  ///
  @override
  Map<String, String> get _aliases => {};
  @override
  List<String> get _viewKeys => ['id', 'name'];
  DubbersView(super.document);

  @override
  _preValidate(Document part) {
    assert(part.querySelector("#video-dubbing .mb-1") != null);
  }

  @override
  List<dynamic> _partDocument(dynamic part) {
    _preValidate(selector);
    var val_0 = part.querySelectorAll("#video-dubbing .mb-1");
    return val_0;
  }

  String _parseId(dynamic part) {
    String val_0 = part.attributes["data-dubbing"];
    return val_0;
  }

  String _parseName(dynamic part) {
    var val_0 = part.querySelector("span");
    String val_1 = val_0?.text ?? "";
    String val_2 = val_1.replaceFirst(RegExp(r'^\\n'), "");
    val_2 = val_2.replaceFirst(RegExp(r'\\n$'), "");
    String val_3 = val_2.replaceFirst(RegExp(r'^ '), "");
    val_3 = val_3.replaceFirst(RegExp(r' $'), "");
    return val_3;
  }

  @override
  _startParse() {
    // clear cache
    _cachedResult.clear();
    for (var part in _partDocument(selector)) {
      _cachedResult.add({
        'id': _parseId(part),
        'name': _parseName(part),
      });
    }
  }
}

class Episode extends __BaseViewModel {
  /// Representation episodes
  ///
  /// Prepare:
  ///   1. get id from Anime object
  ///   2. GET 'https://animego.org/anime/{Anime.id}/player?_allow=true'
  ///   3. extract html from json by ['content'] key
  ///   4. OPTIONAL: unescape HTML
  ///
  /// view() elements signature:
  /// num <TEXT> - episode number
  /// title <TEXT> - episode name
  /// id <TEXT> - episode id REQUIRED for extract video
  ///
  @override
  Map<String, String> get _aliases => {};
  @override
  List<String> get _viewKeys => ['num', 'title', 'id'];
  Episode(super.document);

  @override
  _preValidate(Document part) {
    assert(part.querySelector("#video-carousel .mb-0") != null);
  }

  @override
  List<dynamic> _partDocument(dynamic part) {
    _preValidate(selector);
    var val_0 = part.querySelectorAll("#video-carousel .mb-0");
    return val_0;
  }

  String _parseNum(dynamic part) {
    String val_0 = part.attributes["data-episode"];
    return val_0;
  }

  String _parseTitle(dynamic part) {
    String val_0 = part.attributes["data-episode-title"];
    return val_0;
  }

  String _parseId(dynamic part) {
    String val_0 = part.attributes["data-id"];
    return val_0;
  }

  @override
  _startParse() {
    // clear cache
    _cachedResult.clear();
    for (var part in _partDocument(selector)) {
      _cachedResult.add({
        'num': _parseNum(part),
        'title': _parseTitle(part),
        'id': _parseId(part),
      });
    }
  }
}

class Source extends __BaseViewModel {
  /// representation videos
  ///
  /// Prepare:
  ///   1. get num and id from Episode
  ///   2. GET https://animego.org/anime/series with  params
  ///     {"dubbing": 2, "provider": 24, "episode": Episode.num, "id": Episode.id}
  ///   2. extract html from json by ["content"] key
  ///   3. OPTIONAL: unescape
  ///
  /// view() elements signature:
  /// title <TEXT> - video name
  /// url <TEXT> -
  /// data_provider <TEXT> -
  /// data_provide_dubbing <TEXT> -
  ///
  @override
  Map<String, String> get _aliases => {};
  @override
  List<String> get _viewKeys =>
      ['title', 'url', 'data_provider', 'data_provide_dubbing'];
  Source(super.document);

  @override
  _preValidate(Document part) {
    null;
  }

  @override
  List<dynamic> _partDocument(dynamic part) {
    _preValidate(selector);
    var val_0 = part.querySelectorAll("#video-players > span");
    return val_0;
  }

  String _parseTitle(dynamic part) {
    String val_0 = part?.text ?? "";
    return val_0;
  }

  String _parseUrl(dynamic part) {
    String val_0 = part.attributes["data-player"];
    String val_1 = "https:$val_0";
    return val_1;
  }

  String _parseDataProvider(dynamic part) {
    String val_0 = part.attributes["data-provider"];
    return val_0;
  }

  String _parseDataProvideDubbing(dynamic part) {
    String val_0 = part.attributes["data-provide-dubbing"];
    return val_0;
  }

  @override
  _startParse() {
    // clear cache
    _cachedResult.clear();
    for (var part in _partDocument(selector)) {
      _cachedResult.add({
        'title': _parseTitle(part),
        'url': _parseUrl(part),
        'data_provider': _parseDataProvider(part),
        'data_provide_dubbing': _parseDataProvideDubbing(part),
      });
    }
  }
}*/
